# coding: utf-8

"""
    The First Descendant Metadata API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from meta.models.weapon_response_inner_base_stat_inner import WeaponResponseInnerBaseStatInner
from meta.models.weapon_response_inner_firearm_atk_inner import WeaponResponseInnerFirearmAtkInner
from typing import Optional, Set
from typing_extensions import Self

class WeaponResponseInner(BaseModel):
    """
    WeaponResponseInner
    """ # noqa: E501
    weapon_name: Optional[StrictStr] = Field(default=None, description="Weapon name")
    weapon_id: Optional[StrictStr] = Field(default=None, description="Weapon identifier")
    image_url: Optional[StrictStr] = Field(default=None, description="Weapon image path")
    weapon_type: Optional[StrictStr] = Field(default=None, description="Weapon type")
    weapon_tier: Optional[StrictStr] = Field(default=None, description="Weapon tier")
    weapon_rounds_type: Optional[StrictStr] = Field(default=None, description="Weapon rounds type")
    base_stat: Optional[List[WeaponResponseInnerBaseStatInner]] = Field(default=None, description="Weapon base spec information")
    firearm_atk: Optional[List[WeaponResponseInnerFirearmAtkInner]] = Field(default=None, description="Firearm attack power by level information")
    weapon_perk_ability_name: Optional[StrictStr] = Field(default=None, description="Unique Ability name")
    weapon_perk_ability_description: Optional[StrictStr] = Field(default=None, description="Unique Ability description")
    weapon_perk_ability_image_url: Optional[StrictStr] = Field(default=None, description="Unique Ability image path")
    __properties: ClassVar[List[str]] = ["weapon_name", "weapon_id", "image_url", "weapon_type", "weapon_tier", "weapon_rounds_type", "base_stat", "firearm_atk", "weapon_perk_ability_name", "weapon_perk_ability_description", "weapon_perk_ability_image_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WeaponResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in base_stat (list)
        _items = []
        if self.base_stat:
            for _item in self.base_stat:
                if _item:
                    _items.append(_item.to_dict())
            _dict['base_stat'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in firearm_atk (list)
        _items = []
        if self.firearm_atk:
            for _item in self.firearm_atk:
                if _item:
                    _items.append(_item.to_dict())
            _dict['firearm_atk'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WeaponResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "weapon_name": obj.get("weapon_name"),
            "weapon_id": obj.get("weapon_id"),
            "image_url": obj.get("image_url"),
            "weapon_type": obj.get("weapon_type"),
            "weapon_tier": obj.get("weapon_tier"),
            "weapon_rounds_type": obj.get("weapon_rounds_type"),
            "base_stat": [WeaponResponseInnerBaseStatInner.from_dict(_item) for _item in obj["base_stat"]] if obj.get("base_stat") is not None else None,
            "firearm_atk": [WeaponResponseInnerFirearmAtkInner.from_dict(_item) for _item in obj["firearm_atk"]] if obj.get("firearm_atk") is not None else None,
            "weapon_perk_ability_name": obj.get("weapon_perk_ability_name"),
            "weapon_perk_ability_description": obj.get("weapon_perk_ability_description"),
            "weapon_perk_ability_image_url": obj.get("weapon_perk_ability_image_url")
        })
        return _obj


