# coding: utf-8

"""
    The First Descendant Module Recommendation API

    - Game data for The First Descendant becomes available after 10 minutes on average. - Please note that the OUID may change due to game content updates. Be cautious when renewing services based on the OUID. - For the interpretation of various ID values such as those for descendants, weapons, etc., please refer to the separately provided metadata API (/meta/). - Recommended modules are provided based on the successful records of Void Intercept Battles. Therefore, if there are insufficient records matching the search criteria, the query responses may be empty.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing_extensions import Annotated
from recommendation.models.module_recommendation_response import ModuleRecommendationResponse

from recommendation.api_client import ApiClient, RequestSerialized
from recommendation.api_response import ApiResponse
from recommendation.rest import RESTResponseType


class RecommendationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def tfd_v1_recommendation_module_get(
        self,
        x_nxopen_api_key: Annotated[StrictStr, Field(description="API KEY")],
        descendant_id: Annotated[StrictStr, Field(description="Descendant identifier (Refer to /meta/descendant API)")],
        weapon_id: Annotated[StrictStr, Field(description="Weapon identifier (Refer to /meta/weapon API)")],
        void_battle_id: Annotated[StrictStr, Field(description="Void Intercept Battle identifier (Refer to /meta/void-battle API)")],
        period: Annotated[StrictStr, Field(description="Query period - 0: last 7 days - 1: last 30 days - 2: all time ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModuleRecommendationResponse:
        """Module recommendation

        Recommends modules suited to the user.

        :param x_nxopen_api_key: API KEY (required)
        :type x_nxopen_api_key: str
        :param descendant_id: Descendant identifier (Refer to /meta/descendant API) (required)
        :type descendant_id: str
        :param weapon_id: Weapon identifier (Refer to /meta/weapon API) (required)
        :type weapon_id: str
        :param void_battle_id: Void Intercept Battle identifier (Refer to /meta/void-battle API) (required)
        :type void_battle_id: str
        :param period: Query period - 0: last 7 days - 1: last 30 days - 2: all time  (required)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tfd_v1_recommendation_module_get_serialize(
            x_nxopen_api_key=x_nxopen_api_key,
            descendant_id=descendant_id,
            weapon_id=weapon_id,
            void_battle_id=void_battle_id,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModuleRecommendationResponse",
            '400': "ErrorMessage",
            '403': "ErrorMessage",
            '429': "ErrorMessage",
            '500': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tfd_v1_recommendation_module_get_with_http_info(
        self,
        x_nxopen_api_key: Annotated[StrictStr, Field(description="API KEY")],
        descendant_id: Annotated[StrictStr, Field(description="Descendant identifier (Refer to /meta/descendant API)")],
        weapon_id: Annotated[StrictStr, Field(description="Weapon identifier (Refer to /meta/weapon API)")],
        void_battle_id: Annotated[StrictStr, Field(description="Void Intercept Battle identifier (Refer to /meta/void-battle API)")],
        period: Annotated[StrictStr, Field(description="Query period - 0: last 7 days - 1: last 30 days - 2: all time ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModuleRecommendationResponse]:
        """Module recommendation

        Recommends modules suited to the user.

        :param x_nxopen_api_key: API KEY (required)
        :type x_nxopen_api_key: str
        :param descendant_id: Descendant identifier (Refer to /meta/descendant API) (required)
        :type descendant_id: str
        :param weapon_id: Weapon identifier (Refer to /meta/weapon API) (required)
        :type weapon_id: str
        :param void_battle_id: Void Intercept Battle identifier (Refer to /meta/void-battle API) (required)
        :type void_battle_id: str
        :param period: Query period - 0: last 7 days - 1: last 30 days - 2: all time  (required)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tfd_v1_recommendation_module_get_serialize(
            x_nxopen_api_key=x_nxopen_api_key,
            descendant_id=descendant_id,
            weapon_id=weapon_id,
            void_battle_id=void_battle_id,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModuleRecommendationResponse",
            '400': "ErrorMessage",
            '403': "ErrorMessage",
            '429': "ErrorMessage",
            '500': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tfd_v1_recommendation_module_get_without_preload_content(
        self,
        x_nxopen_api_key: Annotated[StrictStr, Field(description="API KEY")],
        descendant_id: Annotated[StrictStr, Field(description="Descendant identifier (Refer to /meta/descendant API)")],
        weapon_id: Annotated[StrictStr, Field(description="Weapon identifier (Refer to /meta/weapon API)")],
        void_battle_id: Annotated[StrictStr, Field(description="Void Intercept Battle identifier (Refer to /meta/void-battle API)")],
        period: Annotated[StrictStr, Field(description="Query period - 0: last 7 days - 1: last 30 days - 2: all time ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Module recommendation

        Recommends modules suited to the user.

        :param x_nxopen_api_key: API KEY (required)
        :type x_nxopen_api_key: str
        :param descendant_id: Descendant identifier (Refer to /meta/descendant API) (required)
        :type descendant_id: str
        :param weapon_id: Weapon identifier (Refer to /meta/weapon API) (required)
        :type weapon_id: str
        :param void_battle_id: Void Intercept Battle identifier (Refer to /meta/void-battle API) (required)
        :type void_battle_id: str
        :param period: Query period - 0: last 7 days - 1: last 30 days - 2: all time  (required)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tfd_v1_recommendation_module_get_serialize(
            x_nxopen_api_key=x_nxopen_api_key,
            descendant_id=descendant_id,
            weapon_id=weapon_id,
            void_battle_id=void_battle_id,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModuleRecommendationResponse",
            '400': "ErrorMessage",
            '403': "ErrorMessage",
            '429': "ErrorMessage",
            '500': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tfd_v1_recommendation_module_get_serialize(
        self,
        x_nxopen_api_key,
        descendant_id,
        weapon_id,
        void_battle_id,
        period,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if descendant_id is not None:
            
            _query_params.append(('descendant_id', descendant_id))
            
        if weapon_id is not None:
            
            _query_params.append(('weapon_id', weapon_id))
            
        if void_battle_id is not None:
            
            _query_params.append(('void_battle_id', void_battle_id))
            
        if period is not None:
            
            _query_params.append(('period', period))
            
        # process the header parameters
        if x_nxopen_api_key is not None:
            _header_params['x-nxopen-api-key'] = x_nxopen_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tfd/v1/recommendation/module',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


