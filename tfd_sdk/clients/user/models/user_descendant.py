# coding: utf-8

"""
    The First Descendant User API

    - Game data for The First Descendant becomes available after 10 minutes on average. - Please note that the OUID may change due to game content updates. Be cautious when renewing services based on the OUID. - For the interpretation of various ID values such as those for descendants, weapons, etc., please refer to the separately provided metadata API (/meta/). - Nickname must distinguish between uppercase and lowercase letters.

    The version of the OpenAPI document: 1.0.0
    Contact: help_openapi@nexon.co.kr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from user.models.user_descendant_module_inner import UserDescendantModuleInner
from typing import Optional, Set
from typing_extensions import Self

class UserDescendant(BaseModel):
    """
    UserDescendant
    """ # noqa: E501
    ouid: Optional[StrictStr] = Field(default=None, description="OUID")
    user_name: Optional[StrictStr] = Field(default=None, description="Nickname")
    descendant_id: Optional[StrictStr] = Field(default=None, description="Equipped descendant identifier (Refer to /meta/descendant API)")
    descendant_slot_id: Optional[StrictStr] = Field(default=None, description="Descendant slot identifier")
    descendant_level: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Equipped descendant level")
    module_max_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Max. equippable module capacity")
    module_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Equipped capacity")
    module: Optional[List[UserDescendantModuleInner]] = Field(default=None, description="Module information")
    __properties: ClassVar[List[str]] = ["ouid", "user_name", "descendant_id", "descendant_slot_id", "descendant_level", "module_max_capacity", "module_capacity", "module"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserDescendant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in module (list)
        _items = []
        if self.module:
            for _item in self.module:
                if _item:
                    _items.append(_item.to_dict())
            _dict['module'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserDescendant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ouid": obj.get("ouid"),
            "user_name": obj.get("user_name"),
            "descendant_id": obj.get("descendant_id"),
            "descendant_slot_id": obj.get("descendant_slot_id"),
            "descendant_level": obj.get("descendant_level"),
            "module_max_capacity": obj.get("module_max_capacity"),
            "module_capacity": obj.get("module_capacity"),
            "module": [UserDescendantModuleInner.from_dict(_item) for _item in obj["module"]] if obj.get("module") is not None else None
        })
        return _obj


